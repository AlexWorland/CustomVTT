import path from"path";import{expandObject,isEmpty}from"../../../common/utils/helpers.mjs";import{PASSWORD_SAFE_STRING}from"../../../common/constants.mjs";import*as util from"../../../common/utils/helpers.mjs";import View from"./view.mjs";import sessions from"../../sessions.mjs";import{World,System,Module}from"../../packages/_module.mjs";import*as packages from"../../packages/views.mjs";import Files from"../../files/files.mjs";import S3FileStorage from"../../files/s3.mjs";export default class SetupView extends View{route="/setup";socket="getSetupData";_template="setup";_methods=["get","post"];async handleGet(e,a){const t={requireAuth:!1};if(config.license.needsSignature)return a.redirect(`${e.baseUrl}/license`);if(global.game.world)return e.user?a.redirect(`${e.baseUrl}/game`):a.redirect(`${e.baseUrl}/join`);if(!sessions.authenticateAdmin(e,a).success)return a.redirect(`${e.baseUrl}/auth`);t.messages=sessions.getMessages(e);const s=View._getStaticContent({setup:!0});t.scripts=s.scripts,t.styles=s.styles,a.render(this._template,t)}async handlePost(e,a){let t={};const{config:s,game:o}=global,r=util.getRoute("setup"),i=e.body.action,n=sessions.authenticateAdmin(e,a);let c=!o.world&&n.success;if(o.world){if(e.body.shutdown)return t=await o.world.deactivate(e,{asAdmin:c}),a.redirect(t.redirect);const s=await db.User.get(e.user);if("editWorld"===i&&s?.hasRole("GAMEMASTER")){try{t=World.update(e.body)}catch(e){t={error:e.message,stack:e.stack}}return a.json(t)}}if(!c)return a.status(403),a.json({error:"You lack server administrator permission to submit this request."});try{switch(i){case"adminLogout":sessions.logoutAdmin(e,a),t={redirect:r};break;case"adminConfigure":t=await this.updateServerConfiguration(e);break;case"checkPackage":t=await packages.checkPackage(e.body);break;case"getPackageFromRemoteManifest":t=await packages.getPackageFromRemoteManifest(e.body);break;case"getPackages":t=await packages.getPackages(e.body);break;case"installPackage":t=await packages.installPackage(e.body);break;case"resetPackages":t=await packages.resetPackages(e.body);break;case"uninstallPackage":t=await packages.uninstallPackage(e.body);break;case"lockPackage":t=await packages.lockPackage(e.body);break;case"migratePackageManifest":t=await packages.migratePackageManifest(e.body);break;case"createWorld":t=World.create(e.body);break;case"editWorld":t=World.update(e.body);break;case"launchWorld":t=await World.launch(e.body.world);break;case"updateCheck":t=await s.updater.check(e.body),t||(t={info:"SETUP.UpdateNotAvailable"});break;case"updateDownload":t=await s.updater.update();break;default:throw new Error(`Unsupported setup configuration action ${i} provided`)}}catch(e){t={error:e.message,stack:e.stack}}return t.redirect?a.redirect(e.baseUrl+t.redirect):a.json(t)}async handleSocket(e,a){const t=global.config;if(t.adminPassword&&!e.admin||game.world)return a({});const s=t.options.vend();return s.adminPassword=s.adminPassword?PASSWORD_SAFE_STRING:"",a({release:global.release,worlds:World.getPackages().map((e=>e.vend())),systems:System.getPackages().map((e=>e.vend())),modules:Module.getPackages().map((e=>e.vend())),isSetup:!0,isAdmin:e.admin,options:s,files:t.files.clientConfig,languages:Module.getCoreTranslationOptions(),coreUpdate:await t.updater.checkCoreUpdateAvailability(),addresses:t.express.getInvitationLinks(),packageWarnings:globalThis.packages.warnings})}async updateServerConfiguration(e){const a=global.config.options,t=global.paths,s=!!e.session?.admin,o=null!==a.adminPassword;if(!(!game.active&&(s||!o)))throw new Error("You do not have permission to update the core application configuration");const r=expandObject(e.body).config;let i=!1;if("adminPassword"in r&&(a.setAdministratorPassword(r.adminPassword),delete r.adminPassword,i=!0),a.validate({changes:r,clean:!0,strict:!0}),r.awsConfig&&r.awsConfig!==a.awsConfig)try{S3FileStorage.fromConfig("s3",r.awsConfig)}catch(e){throw new Error(`The AWS configuration path ${r.awsConfig} did not provide a valid configuration.`)}const n=a.update(r);if(!isEmpty(n)){i=!0;const e=n.dataPath?t.envOptions:t.options;a.save(e),n.dataPath&&(await Files.copyDirectory(t.config,path.join(n.dataPath,"Config"),{ignore:["options.json"]}),a.save(path.join(n.dataPath,"Config","options.json")))}return i?(logger.warn("Application configuration settings updated, server restart required!"),process.exit(),{shutdown:!0}):{redirect:"/setup"}}}