import EventEmitter from"events";import path from"path";import Files from"../files/files.mjs";import fs from"fs";import{PACKAGE_TYPE_MAPPING}from"./_module.mjs";export default class PackageInstaller extends EventEmitter{constructor(t,i,s,e,a){super(),this._type=t,this._baseDir=i,this._id=s,this._localZip=e,this._auth=a}_id;_localZip;_auth;_type;_baseDir;_lastPct=0;install=()=>new Promise((async t=>{let i;try{if(this._id.startsWith(".."))throw new Error("You are not allowed to install packages outside of the designated directory path");const t=path.join(this._baseDir,this._id);let s="",e=await Files.summarizeArchive(this._localZip,{manifestPath:`${this._type}.json`});if(null===e.manifest){const t=e.contents.find((t=>t.endsWith(`${this._type}.json`)));s=`${path.dirname(t)}/`,e=await Files.summarizeArchive(this._localZip,{manifestPath:`${s}${this._type}.json`})}if(!e.manifest)throw fs.unlinkSync(this._localZip),new Error(`The downloaded package ${this._id} did not contain the expected ${this._type}.json manifest file.`);if(i=new PACKAGE_TYPE_MAPPING[this._type](JSON.parse(e.manifest),{installed:!1}),await Files.rmdir(t),await Files.extractArchive(this._localZip,t,{removeRoot:s,onProgress:(t,i,s,e)=>this._progress("Installing",e)}),this._auth){const i=path.join(t,"signature.json"),s="signatureV2"in this._auth?{key:this._auth.key,package:this._id,signature:this._auth.signatureV2}:{key:this._auth.key,signature:this._auth.signature};fs.writeFileSync(i,JSON.stringify(s,null,2))}}catch(t){this.emit("error",t)}this._progress("Cleanup",100),fs.unlinkSync(this._localZip),this._progress("Complete",100),t(i.vend())}));_progress(t,i){i!==this._lastPct&&(this._lastPct=i,this.emit("progress",t,i))}}