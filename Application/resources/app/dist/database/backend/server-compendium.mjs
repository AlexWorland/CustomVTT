import fs from"fs";import{mergeObject}from"../../../common/utils/helpers.mjs";export default function ServerCompendiumMixin(t){return class extends t{static packData;static get package(){return packages[this.packData.packageType.titleCase()].get(this.packData.packageName)}static metadata=(()=>mergeObject(super.metadata,{permissions:{create:this.#t,update:this.#t,delete:this.#t}},{inplace:!1}))();static get collectionName(){return this.packData.id}static get implementation(){return db.packs.get(this.collectionName)}static get filename(){return this.packData.absPath}static async disconnect(){await super.disconnect(),db.packs.delete(this.collectionName)}static fromSource(t,e={}){return e.pack=this.collectionName,super.fromSource(t,e)}static#t(t,e,a){if(((game.compendiumConfiguration||{})[e.collectionName]||{}).locked??"world"!==e.constructor.package.type)throw new Error(`You may not modify the ${e.collectionName} Compendium which is currently locked.`);return t.isGM}static async deleteCompendium(){await this.disconnect(),fs.existsSync(this.filename)&&fs.unlinkSync(this.filename),logger.info(`Deleted Compendium Pack ${this.collectionName}`)}static async getIndex(t){if(!t)throw new Error("You must provide an array of index fields to retrieve");return this.connected||await this.connect(),this.database._getDocuments(this,{query:{},options:{index:!0,indexFields:t}})}static async migrate({user:t,...e}={}){logger.info(`Migrating ${this.collectionName} Compendium to updated system template version.`),this.connected||await this.connect();const a=await this.find();for(let e of a)this.hasSystemData&&e.updateSource({system:e.migrateSystemData()}),e.tagDocumentStats({user:t}),await e.save(),logger.info(`Migrated ${this.documentName} ${e.name} in Compendium pack ${this.collectionName}`);this.db._compactImmediate(),logger.info(`Migrated all ${a.length} ${this.documentName} Documents in Compendium pack ${this.collectionName}`)}}}