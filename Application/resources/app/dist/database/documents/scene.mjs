import BaseScene from"../../../common/documents/scene.mjs";import ServerDocumentMixin from"../backend/server-document.mjs";import{GRID_TYPES}from"../../../common/constants.mjs";import{setProperty}from"../../../common/utils/helpers.mjs";export default class Scene extends(ServerDocumentMixin(BaseScene)){async _preCreate(e,t,s){return this.active&&await this.activate(),super._preCreate(e,t,s)}async _preUpdate(e,t,s){await super._preUpdate(e,t,s),e.active&&await this.activate()}_onDelete(e,t){db.Combat._onDeleteScene(this),db.FogExploration.db.deleteMany({scene:this.id})}async activate(){logger.info(`Activating scene ${this.name} [${this.id}]`),await this.constructor.db.updateMany({active:!0},{$set:{active:!1}}),this.updateSource({active:!0})}static async migrateSystem(){const e=await this.find({},{});for(let t of e){let e=!1;try{for(let s of t.tokens){const t=s.actorData?.items||[];!s.actorLink&&t.length&&(s.actorData.items=t.map((e=>{const t=new db.Item(e);return t.updateSource({system:t.migrateSystemData()}),t.toObject()})),e=!0)}await this.db.updateOne({_id:t.id},t.toObject())}catch(e){logger.error(e)}}logger.info(`Successfully migrated ${e.length} Scenes to the latest system data model`)}static fromSource(e,t){const s=e.grid?.type??e.gridType;return[GRID_TYPES.HEXODDR,GRID_TYPES.HEXEVENR,GRID_TYPES.HEXODDQ,GRID_TYPES.HEXEVENQ].includes(s)&&!e._stats?.coreVersion&&setProperty(e,"flags.core.legacyHex",!0),super.fromSource(e,t)}static socketListeners(e){e.on("preloadScene",this.#e.bind(e)),e.on("pullToScene",this.#t.bind(e))}static#e(e,t){this.broadcast.emit("preloadScene",e),t(e)}static async#t(e,t){if(!this.user.isGM)return;const s=(await db.User.get(t,{strict:!0})).sockets;s.length&&s.forEach((t=>this.server.to(t.id).emit("pullToScene",e)))}}