import BaseFolder from"../../../common/documents/folder.mjs";import ServerDocumentMixin from"../backend/server-document.mjs";import{SORT_INTEGER_DENSITY}from"../../../common/constants.mjs";export default class Folder extends(ServerDocumentMixin(BaseFolder)){async getSubfolders(e=!1,t){if((t=t||new Set).has(this.id))return[];let r=await Folder.find({folder:this.id});if(t.add(this.id),e&&r.length)for(let e of r){const i=await e.getSubfolders(!0,t);r=r.concat(i)}return r}async _preCreate(e,t,r){if(!Number.isFinite(this.sort)){const e=await Folder.find({type:this.type});let t=Math.max(...e.map((e=>e.sort||0)));this.updateSource({sort:t+SORT_INTEGER_DENSITY})}}async _preUpdate(e,t,r){if(await super._preUpdate(e,t,r),e.parent&&e.parent===this.id)throw new Error("You cannot assign a Folder to be it's own parent")}async _preDelete(e,t){const r=this.parent||null,i=db[this.type].implementation,{deleteContents:o,deleteSubfolders:a}=e,d=new Set([this.id]),n=new Set,s=await this.getSubfolders(!0);for(let e of s)a?d.add(e.id):n.add(e.id);await this.db.deleteMany({_id:{$in:Array.from(d)}}),await this.db.updateMany({_id:{$in:Array.from(n)}},{$set:{parent:r}});let l=0;o?l=await i.db.deleteMany({folder:{$in:Array.from(d)}}):await i.db.updateMany({folder:{$in:Array.from(d)}},{$set:{folder:r}}),logger.info([`Deleted Folder ${this.id}`,d.size>1?d.size-1+" sub-Folders":"",l?`and ${l} ${this.type} Documents`:""].filterJoin(", "))}}